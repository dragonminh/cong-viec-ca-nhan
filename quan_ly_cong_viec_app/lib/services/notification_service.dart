import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:quan_ly_cong_viec_app/models/task.dart';

class NotificationService {
  static Future<void> initializeNotifications() async {
    await AwesomeNotifications().initialize(
     'resource://mipmap/ic_launcher', // icon cho th√¥ng b√°o
      [
        NotificationChannel(
          channelGroupKey: 'basic_channel_group',
          channelKey: 'basic_channel',
          channelName: 'Nh·∫Øc nh·ªü c√¥ng vi·ªác',
          channelDescription: 'K√™nh th√¥ng b√°o cho c√°c c√¥ng vi·ªác v√† nh·∫Øc nh·ªü',
          defaultColor: Colors.teal,
          ledColor: Colors.white,
          importance: NotificationImportance.High,
          channelShowBadge: true,
        )
      ],
      channelGroups: [
        NotificationChannelGroup(
          channelGroupKey: 'basic_channel_group',
          channelGroupName: 'Nh√≥m c∆° b·∫£n',
        )
      ],
      debug: true,
    );

    bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
    if (!isAllowed) {
      await AwesomeNotifications().requestPermissionToSendNotifications();
    }
  }

  static Future<void> showTestNotification() async {
    AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: -1, // D√πng ID √¢m ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        channelKey: 'basic_channel',
        title: 'ƒê√¢y l√† th√¥ng b√°o th·ª≠ nghi·ªám! üîî',
        body: 'N·∫øu b·∫°n th·∫•y ƒë∆∞·ª£c th√¥ng b√°o n√†y, nghƒ©a l√† m·ªçi th·ª© ƒë√£ ho·∫°t ƒë·ªông.',
      ),
    );
  }

  /// L√™n l·ªãch th√¥ng b√°o cho m·ªôt c√¥ng vi·ªác c·ª• th·ªÉ
  static Future<void> scheduleNotificationForTask(Task task) async {
    // Kh√¥ng l√™n l·ªãch n·∫øu kh√¥ng c√≥ gi·ªù c·ª• th·ªÉ ho·∫∑c c√¥ng vi·ªác ƒë√£ ho√†n th√†nh
    if (task.dueTime == null || task.isCompleted) {
      // N·∫øu c√≥ th√¥ng b√°o c≈©, h√£y h·ªßy n√≥ ƒëi
      await cancelScheduledNotification(task.id);
      return;
    }

    try {
      // Gh√©p ng√†y v√† gi·ªù th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng DateTime ho√†n ch·ªânh
      final scheduleDateTime =
        DateFormat("yyyy-MM-dd HH:mm").parse('${task.dueDate} ${task.dueTime!}');

      // Ch·ªâ l√™n l·ªãch n·∫øu th·ªùi gian l√† trong t∆∞∆°ng lai
      if (scheduleDateTime.isAfter(DateTime.now())) {
        await AwesomeNotifications().createNotification(
          content: NotificationContent(
            id: task.id, // ID c·ªßa th√¥ng b√°o = ID c·ªßa c√¥ng vi·ªác
            channelKey: 'basic_channel',
            title: '‚è∞ Nh·∫Øc nh·ªü: ${task.title}',
            body: task.note != null && task.note!.isNotEmpty
                ? task.note!
                : 'ƒê√£ ƒë·∫øn gi·ªù th·ª±c hi·ªán c√¥ng vi·ªác c·ªßa b·∫°n.',
            notificationLayout: NotificationLayout.Default,
            payload: {'taskId': task.id.toString()}, // G·ª≠i k√®m d·ªØ li·ªáu
          ),
          schedule: NotificationCalendar.fromDate(
            date: scheduleDateTime,
            preciseAlarm: true, // ƒê·∫£m b·∫£o ƒë√∫ng gi·ªù tr√™n Android
            allowWhileIdle: true, // Cho ph√©p hi·ªán khi m√°y ·ªü ch·∫ø ƒë·ªô ch·ªù
          ),
        );
        debugPrint('‚úÖ ƒê√£ l√™n l·ªãch th√¥ng b√°o cho c√¥ng vi·ªác #${task.id} l√∫c $scheduleDateTime');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l√™n l·ªãch th√¥ng b√°o: $e');
    }
  }

  /// H·ªßy m·ªôt th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch
  static Future<void> cancelScheduledNotification(int taskId) async {
    await AwesomeNotifications().cancel(taskId);
    debugPrint('üö´ ƒê√£ h·ªßy l·ªãch th√¥ng b√°o cho c√¥ng vi·ªác #${taskId}');
  }
}